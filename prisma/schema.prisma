// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique // unique username per account, at least 2 char, alpha-numeric, editable by user
  password    String // at least 8 chars, 1 lower, 1 upper, 1 number, 1 special
  salt        String // salting the password!
  firstName   String? // optional, at least 2 char
  lastName    String? // optional, at least 2 char
  email       String   @unique // unique email per account, this should only be changed by admin
  avatar      String? // optional, expecting a URL or a encoded image
  phoneNumber String? // optional, valid phone number
  role        String   @default("USER") // USER or ADMIN
  deleted     Boolean  @default(false) // store whether user deleted for soft delete
  createdAt   DateTime @default(now()) // this should not be manually modified
  updatedAt   DateTime @updatedAt @default(now()) // this should not be manually modified

  blogPosts     BlogPost[]
  comments      Comment[]
  codeTemplates CodeTemplate[]
}

model CodeTemplate {
  id             Int      @id @default(autoincrement())
  title          String
  explanation    String?
  tags           String?
  forkedSourceId Int?
  author         User     @relation(fields: [authorId], references: [id])
  authorId       Int
  modifiedAt     DateTime @default(now())
  content        String
  language       String
  deleted        Boolean

  blogPosts BlogPost[]
}

model BlogPost {
  id               Int            @id @default(autoincrement())
  title            String
  description      String
  tags             String
  createdAt        DateTime       @default(now())
  flagged          Boolean        @default(false)
  upvotedUserIds   String
  downvotedUserIds String
  codeTemplates    CodeTemplate[]
  reportsCount     Int            @default(0)
  hidden           Boolean        @default(false)
  author           User           @relation(fields: [authorId], references: [id])
  authorId         Int

  comments Comment[]
  Report   Report[]
}

model Comment {
  id               Int      @id @default(autoincrement())
  blogPost         BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId       Int
  createdAt        DateTime @default(now())
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  content          String
  upvotedUserIds   String
  downvotedUserIds String
  reportsCount     Int      @default(0)
  hidden           Boolean  @default(false)

  Report Report[]
}

model Report {
  id         Int       @id @default(autoincrement())
  content    String
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  Int?
}
